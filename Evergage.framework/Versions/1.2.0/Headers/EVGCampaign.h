//
//  EVGCampaign.h
//  Evergage
//
//  Copyright (c) 2015 Evergage. All rights reserved.
//

#import <Foundation/Foundation.h>


@class EVGCampaign;

/**
 Callback block the app creates to handle potential `<EVGCampaign>`s served in response to Evergage actions
 generated by the user interacting with the app.
 
 See `<[EVGContext setCampaignHandler:forTarget:]>` for additional info and lifecycle details.
 
 #### Usage Details:
 
 - For a view controller, it is recommended to setup handlers in `viewWillAppear:`. See examples below.
 - Validate the expected campaign data/JSON before processing, since campaigns are dynamic and designed
   in the Evergage web app.
 - The same campaign could be re-served, so when applicable, check if the same content is already active.
   For example, there's no need to re-render the same message/UI to the user if it's still visible.
   This is especially true when testing a specific experience, see `<[Evergage includeSpecificTestCampaignExperience:]>`.
 - Follow best practices using weak references within the handler block, to avoid retaining objects in memory longer
   than expected, which could lead to memory bloat and unexpected behavior. Examples correctly using weak reference:
 
 #### Obj-C:
    // In ViewController.m
 
    - (void)viewWillAppear:(BOOL)animated {
        [super viewWillAppear:animated];
        
        __weak typeof(self) weakSelf = self;
        EVGCampaignHandler handler = ^(EVGCampaign * __nonnull campaign) {
            // Safest to perform a single method/operation on weakSelf, which will simply be a no-op if weakSelf is nil:
            [weakSelf handleCampaign:campaign];
        };
        [self.evergageScreen setCampaignHandler:handler forTarget:@"UniqueTargetForDataCampaignType"];
    }
 
    - (void)handleCampaign:(nonnull EVGCampaign *)campaign {
        // When applicable, check if the same content is already active (see Usage Details above).
        NSLog(@"This screen is handling campaign name %@ for target %@ with data %@",
            campaign.campaignName, campaign.target, campaign.data);
        // ...
    }
 
 #### Swift:
    // In ViewController.swift
 
    override func viewWillAppear(animated: Bool) {
        super.viewWillAppear(animated)
 
        // Note self is captured weakly
        let handler = { [weak self] (campaign: EVGCampaign) -> Void in
            // Safest to perform a single method/operation on weakSelf, which will simply be a no-op if weakSelf is nil:
            self?.handleCampaign(campaign)
        }
        self.evergageScreen?.setCampaignHandler(handler, forTarget: "UniqueTargetForDataCampaignType")
    }
 
    func handleCampaign(campaign: EVGCampaign) {
        // When applicable, check if the same content is already active (see Usage Details above).
        NSLog("This screen is handling campaign name %@ for target %@ with data %@",
            campaign.campaignName, campaign.target, campaign.data)
        // ...
    }
 */
typedef void (^EVGCampaignHandler)(EVGCampaign * __nonnull campaign);


/**
 An Evergage data campaign to be handled by the app, served in response to Evergage actions generated by the user
 interacting with the app.
 
 A campaign is delivered to a `<EVGCampaignHandler>` registered for a unique app-defined `<target>` in the scope
 of an `<EVGContext>`. See `<[EVGContext setCampaignHandler:forTarget:]>` for additional info and lifecycle details.
 */
@interface EVGCampaign : NSObject

- (nullable instancetype)init __attribute__((unavailable("Use campaigns delivered to an EVGCampaignHandler.")));

/**
 A unique app-defined string that identifies a type of data campaign consumable by the app.
 
 Specifically, campaigns designed for a target should all share a compatible `<data>` structure,
 in order to be consumable by any `<EVGCampaignHandler>` registered for that target.
 
 @see [EVGContext setCampaignHandler:forTarget:]
 */
@property (nonnull, readonly, nonatomic, copy) NSString *target;

/**
 The identifier for this campaign.
 */
@property (nonnull, readonly, nonatomic, copy) NSString *campaignId;

/**
 The name of this campaign.
 */
@property (nonnull, readonly, nonatomic, copy) NSString *campaignName;

/**
 The identifier of the experience in this campaign.
 */
@property (nonnull, readonly, nonatomic, copy) NSString *experienceId;

/**
 The name of the experience in this campaign.
 */
@property (nonnull, readonly, nonatomic, copy) NSString *experienceName;

/**
 The identifier of the message in this campaign.
 */
@property (nonnull, readonly, nonatomic, copy) NSString *messageId;

/**
 Array of related promoted items, if any, in minimal JSON form.
 Automatically used in stat tracking.
 */
@property (nullable, readonly, nonatomic, strong) NSArray<NSDictionary<NSString *,id> *> *promotedItemKeys;

/**
 The data campaign's JSON payload.
 
 The structure should be designed for the app-defined `<target>`, in order to be consumable by
 any `<EVGCampaignHandler>` registered for that target.
 
 @see [EVGContext setCampaignHandler:forTarget:]
 */
@property (nonnull, readonly, nonatomic, strong) NSDictionary<NSString *,id> *data;

/**
 If this campaign is for a user in the control group.
 
 If `NO`, this campaign should be handled normally. When applicable, show the campaign
 to the user and track the impression.
 
 If `YES`, this campaign should not take effect. Do not show to the user, but do track impression IF
 the campaign would have been shown.
 
 To ensure accurate statistics, make sure to execute all the logic that could affect whether this campaign would
 be shown to the user, regardless of this property. If all those checks pass and `isControlGroup == NO`, show
 the campaign to the user. Finally, call `<[EVGContext trackImpression:]>` to notify Evergage that the user
 saw the campaign (`isControlGroup == NO`) or would have seen it (`isControlGroup == YES`).
 */
@property (readonly, nonatomic, assign) BOOL isControlGroup;

@end
